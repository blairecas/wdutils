	.title	HDBOOT

; HDD image writer over RS-232
; used with hddsender.exe to write HDD images to drive

	.macro	.print	X
	mov	X, R0
	call	PriStr
	.endm

	.macro	.prdec	X
	mov	X, R0
	call	PriDec
	.endm

; //////////////////////////////////////////////////////////////////////////////
; // Boot
; //////////////////////////////////////////////////////////////////////////////

	.asect
	.=0

Boot:	nop					; needed for loading with RS-232
	; print hello message
	mov	#MsgHlo, R0
10$:	movb	(R0)+, R1
	beq	20$
	tstb	@#177564
	bpl	.-4
	movb	r1, @#177566
	br	10$
20$:	; load rest of code over RS-232
	mov	#176570, R4
	mov	#176572, R5
	mov	#1000, R1
	; get length MSB (bytes) -> R3
	clr	R3
	tstb	(R4)
	bpl	.-2
	bisb	(R5), R3
	swab	R3
	tstb	(R4)
	bpl	.-2
	bisb	(R5), R3
	mov	R3, R0
	; load main code
30$:	tstb	(R4)
	bpl	.-2
	movb	(R5), (R1)+
	sob	R3, 30$
	mov	#1000, SP
	jmp	(SP)

MsgHlo:	.asciz	"HDD writer is loading... "
	.even

	.if LT 700-.
	.error first block addr limit exceeded
	.endc

; //////////////////////////////////////////////////////////////////////////////
; // CPU Main
; //////////////////////////////////////////////////////////////////////////////

	.asect
	.=1000

Start:	; print message that we are loaded main code
	.print	#MsgLdd
	; get initial cylinder, head values
	mov	#103, R0
	call	SenByt
	call	GetDwo				; will use only R3
	mov	R3, R0
	ash	#-4, R0
	bic	#^B1111000000000000, R0
	mov	R0, Cylind
	call	PriDec
	.print	#MsgLd1
	mov	R3, R0
	bic	#^B1111111111110000, R0
	mov	R0, Head
	call	PriDec
	.print	#MsgLd2
	; clean up low addrs
	call	ClearL
	; select cartridge #
	.print	#MsgSel
Selca:	call	GetKey
	cmpb	R0, #15
	beq	10$
	cmpb	R0, #'1
	beq	10$
	cmpb	R0, #'2
	bne	Selca
	mov	#2, PpuCas
10$:	mov	PpuCas, R0
	add	#'0, R0
	call	PriChr
	.print	#MsgCrl
StarP:	; starting PPU code
	call	PPSen				; exec allocate
	movb	#20, PPCmd			; 20 - write
	mov 	#PpuSta, PPAcp
	call	PPSen
	movb	#30, PPCmd			; 30 - run
	call	PPSen
	call	PpuWai
	; read info	
	mov	#1, PpuCom
	call	PpuWai
	.print	#MsgInf
	; cylinders
	.print	#MsgI00
	mov	01.*2+End, MaxCyl
	.prdec	01.*2+End
	.print	#MsgCrl
	; heads
	.print	#MsgI01
	mov	03.*2+End, MaxHea
	.prdec	03.*2+End
	.print	#MsgCrl
	; sectors
	.print	#MsgI02
	mov	06.*2+End, MaxSec
	.prdec	06.*2+End
	.print	#MsgCrl
	; serial
	.print	#MsgI03
	mov	#10.*2+End, R0
	mov	#20., R3
	call	PriMsb
	; firmware
	.print	#MsgI04
	mov	#23.*2+End, R0
	mov	#8., R3
	call	PriMsb
	; model
	.print	#MsgI05
	mov	#27.*2+End, R0
	mov	#40., R3
	call	PriMsb
	.print	#MsgCrl


Selwha:	; what to do?
	.print	#MsgWha
	call	GetKey
	cmpb	R0, #15
	beq	Read0
	cmpb	R0, #'1
	beq	Read1
	cmpb	R0, #'2
	bne	Selwha


; write sectors to HDD 
Write:	call	PriChr
	.print	#MsgWri
	; send code 102 (write)
	mov	#102, R0
	call	SenByt
	call	GetDwo				; get length in sectors to R2:R3
10$:	; get RS232 data
	mov	#End, R0
	mov	#512., R1
20$:	tstb	(R4)
	bpl	.-2
	movb	(R5), (R0)+
	sob	R1, 20$
	; ask PPU to put sector
	; TODO: use 2 buffers and do not wait here
	mov	#3, PpuCom
	call	PpuWai
	call	AckSen
	call	IncSec
	sob	R3, 10$
	dec	R2
	bpl	10$
	br	Done


; read sectors from HDD and send them by RS-232
Read0:	mov	#'1, R0
Read1:	call	PriChr
	.print	#MsgRea
	mov	#101, R0			; send code 101 (read)
	call	SenByt
	call	GetDwo				; get length in sectors to R2:R3
	call	SetSen
10$:	; ask PPU to get sector
	mov	#2, PpuCom
	call	PpuWai
	; send to RS232
	mov	#End, R0
	mov	#512., R1
20$:	tstb	(R4)
	bpl	.-2
	movb	(R0)+, (R5)
	sob	R1, 20$
	; advance sector and loop
	call	IncSec
	sob	R3, 10$
	dec	R2
	bpl	10$

Done:	.print	#MsgDon
	halt


; set registers R4, R5 for sending to
SetSen:	mov	#176574, R4
	mov	#176576, R5
	return


; set registers R4, R5 for reading from
SetRea:	mov	#176570, R4
	mov	#176572, R5
	return


; send byte R0 -> RS-232
SenByt:	call	SetSen
	tstb	(R4)
	bpl	.-2
	movb	R0, (R5)
	return


; get dword to R2:R3 as 3-bytes from RS-232
GetDwo:	call	SetRea
	tstb	(R4)
	bpl	.-2
	movb	(R5), R2			; 0-127 is enough
	clr	R3
	tstb	(R4)
	bpl	.-2
	bisb	(R5), R3
	swab	R3
	tstb	(R4)
	bpl	.-2
	bisb	(R5), R3
	return


; send acknowledge
AckSen:	tstb	@#176574
	bpl	AckSen
	movb	#^xAA, @#176576
	return


; increase sector/head/track
IncSec:	inc	Sector
	cmp	Sector, MaxSec
	blos	90$
	mov	#1, Sector
	inc	Head
	cmp	Head, MaxHea
	blo	90$
	clr	Head
	inc	Cylind
90$:	return


PPmsg:	.word	PPArr				; beginning of array addr
        .word	177777
PPArr:	.byte	0				; 23334 return value (0 - OK)
PPCmd:	.byte	1				; 23335 command
PPDev:	.word	32				; 23336 device type (32-ppu mem)
PPApp:	.word	0				; 23340 argument(s) (PPU addr for mem operations)
PPAcp:	.word	End-PpuSta/2			; 23342 CPU addr (length in words for mem allocate)
PPLen:	.word	End-PpuSta/2			; 23344 length in words

; send command to PPU
PPSen:	mov	#PPMsg, R2
	mov	#5, R3
	br	20$
10$:	movb	(R2)+, @#176676
20$:	tstb	@#176674
	bpl	20$
	sob	R3, 10$
	return

; wait for PPU is ready
PpuWai:	tst	PpuCom
	bne	.-4
	return

; get key to R0 with channel 0
GetKey:	tstb	@#177560
	bpl	.-4
10$:	movb	@#177562, R0
	tstb	@#177560
	bmi	10$
	return

; print character with channel 0
PriChr:	tstb	@#177564
	bpl	.-4
	movb	R0, @#177566
	return

; print string with channel 0
PriStr:	mov	R1, -(SP)
10$:	movb	(R0)+, R1
	beq	99$
	tstb	@#177564
	bpl	.-4
	movb	R1, @#177566
	br	10$
99$:	mov	(SP)+, R1
	return

; print decimal number
PriDec:	mov	R1, -(SP)
	mov	R2, -(SP)
	mov	R3, -(SP)
	mov	#MsgNum+6, R2
	mov	#5., R3
10$:	mov	R0, R1
	clr	R0
	div	#10., R0			; R0:R1 / 10. -> R0 - quotient, R1 - reminder
	add	#'0, R1
	movb	R1, -(R2)
	sob	R3, 10$
	mov	#MsgNum, R0
	mov	(SP)+, R3
	mov	(SP)+, R2
	mov	(SP)+, R1
	br	PriStr

; print ascii msb words
PriMsb:	tstb	@#177564
	bpl	.-4
	movb	1(R0), @#177566
	beq	99$
	tstb	@#177564
	bpl	.-4
	movb	(R0), @#177566
	beq	99$
	add	#2, R0
	sub	#2, R3
	bne	PriMsb
99$:	.print	#MsgCrl
	return

; clean up low addrs
ClearL:	clr	R0
	mov	#2, (R0)+
	clr	(R0)+
	mov	#500-4/4, R3
10$:	clr	(R0)+
	mov	#200, (R0)+
	sob	R3, 10$
	mov	#700-500/2, R3			; leave some for the stack
	clr	(R0)+				; or else will clean return addr
	sob	R3, .-2
	return

PpuCom:	.word	1
Cylind:	.word	0				; cylinder #
Head:	.word	0				; head #
Sector:	.word	1				; sector #
MaxCyl:	.word	80.
MaxHea:	.word	16.
MaxSec:	.word	63.

MsgSel:	.asciz	"Select HDD slot [1]: "
MsgLdd:	.asciz	"done, cyl:head ("
MsgLd1:	.asciz	":"
MsgLd2:	.ascii	")"
MsgCrl:	.asciz	<12><15>
MsgNum:	.asciz	"000000"
MsgInf:	.asciz	<12><15>"HDD Information"<12><15><12><15>
MsgI00:	.asciz	"Cylinders: "
MsgI01:	.asciz	"    Heads: "
MsgI02:	.asciz	"  Sectors: "
MsgI03:	.asciz	"   Serial: "
MsgI04:	.asciz	" Firmware: "
MsgI05:	.asciz	"    Model: "
MsgWha:	.ascii	"1 - Read HDD image"<12><15>
	.ascii	"2 - Write HDD image"<12><15>
	.asciz	"Select action (write will DESTROY ALL DATA on MS0511 HDD) [1]: "
MsgRea:	.asciz	<12><15><12><15>"Reading HDD image"<12><15>
MsgWri:	.asciz	<12><15><12><15>"Writing HDD image"<12><15>
MsgDon:	.asciz	<12><15>"Done, restart MS0511"<12><15>
	.even


; //////////////////////////////////////////////////////////////////////////////
; // PPU code
; //////////////////////////////////////////////////////////////////////////////

PpuSta:	bis	PpuCas, @#177054
	; fast scrolling
	mov	#1, @#7170
	mov	#2, @#7136

PpuDon:	mov	#PpuCom/2, @#177010
	clr	@#177014

PpuMai:	mtps	#0
	bis	#1, @#177054
	trap	0
	mov	#PpuCom/2, @#177010
	mov	@#177014, R0
	beq	PpuMai
	mtps	#200
	bic	#1, @#177054
	dec	R0
	asl	R0
	add	R0, PC
	br	PpuIde
	br	PpuRea
	br	PpuWri

PpuCas:	.word	1

; run IDE identify command and read block
PpuIde:	mov	#110016, R5			; 110016 data port addr
	mov	#110000, R4			; 110000 control port addr
	mov	#256., R3
	mov	#End/2, @#177010
	mov	#^C<^xEC>, (R4)
10$:	bit	#^B1000, (R4)			; test command port
	bne	.-4				; not ready
	mov	(R5), R0
	com	R0
	mov	R0, @#177014
	inc	@#177010
	sob	R3, 10$
	jmp	PpuDon

; read sector
PpuRea:	call	PpuRwp
	mov	#^C40, (R4)			; 110000 command 0x20 - read sectors
20$:	bit	#^B1000, (R4)			; test command port
	bne	.-4				; not ready
	mov	(R5), @#177014			; get data (not inverting this time)
	inc	@#177010
	sob	R3, 20$
	br	PpuDon

; write sector
PpuWri:	call	PpuRwp
	mov	#^C60, (R4)			; 110000 command 0x30 - write sectors
20$:	bit	#^B1000, (R4)			; test command port
	bne	.-4				; not ready
	mov	@#177014, (R5)			; put data
	inc	@#177010
	sob	R3, 20$
	; flush cache
	mov	#^C<^xE7>, (R4)
	br	PpuDon

; prepare read/write
PpuRwp:	mov	#110016, R5			; 110016 data port addr
	mov	#110014, R4			; 110014 error code 
	mov	#^C1, -(R4)			; 110012 sectors count (1)
	mov	#Sector/2, @#177010
	mov	@#177014, R0
	com	R0
	mov	R0, -(R4)			; 110010 sector #
	mov	#Cylind/2, @#177010
	mov	@#177014, R0
	com	R0
	mov	R0, -(R4)			; 110006 cylinder # low byte
	swab	R0
	mov	R0, -(R4)			; 110004 cylinder # high byte
	mov	#Head/2, @#177010
	mov	@#177014, R0
	bis	#^B10100000, R0
	com	R0
	mov	R0, -(R4)			; 110002 head # (1010xxxx)
	mov	#End/2, @#177010		; where to/from
	mov	#256., R3			; length in words
	tst	-(R4)
	; check 'drive ready'
	; tstb	(R4)
	; bpl	.-2
	return


End:	.word	123456
	.end	Boot
